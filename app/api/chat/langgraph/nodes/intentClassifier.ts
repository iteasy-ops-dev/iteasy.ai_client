import { ChatOpenAI } from '@langchain/openai'
import { HumanMessage, SystemMessage } from '@langchain/core/messages'
import { ChatState, IntentClassificationResult, NodeResponse } from '../types'
import { INTENT_CLASSIFICATION_PROMPT } from '../prompts/intentClassification'

// Enhanced local keyword-based intent classification with improved scoring
function classifyIntentLocally(message: string, sshConnection?: import('../types').SSHConnectionInfo): { intent: string; confidence: number; language: 'ko' | 'en' } {
  const lowerMessage = message.toLowerCase()
  const isKorean = /[Í∞Ä-Ìû£]/.test(message)
  const language = isKorean ? 'ko' : 'en'
  
  // SSH Ïª®ÌÖçÏä§Ìä∏ ÌôïÏù∏
  const hasActiveSSHConnection = sshConnection && sshConnection.isActive
  console.log(`üîó [SSH_CONTEXT] Active SSH connection: ${hasActiveSSHConnection ? sshConnection.host : 'none'}`)
  
  // Guide-related patterns and keywords (Korean + English) - Enhanced  
  const guidePatterns = [
    // Direct guide requests (weighted higher)
    { pattern: /Ïñ¥ÎñªÍ≤å\s*(ÏÇ¨Ïö©|Ïì∞|Ìïò|Ïç®)/g, weight: 2.0 },
    { pattern: /ÏÇ¨Ïö©Î≤ï|ÏÇ¨Ïö©Î∞©Î≤ï|Ïù¥Ïö©Î∞©Î≤ï/g, weight: 2.0 },
    { pattern: /ÎèÑÏõÄÎßê|Ìó¨ÌîÑ|help|guide/g, weight: 2.0 },
    { pattern: /ÏÑ§Î™ÖÌï¥|ÏïåÎ†§Ï§ò|Í∞ÄÎ•¥Ï≥ê/g, weight: 1.8 },
    { pattern: /Í∏∞Îä•.*Î≠ê|Î¨¥Ïä®.*Í∏∞Îä•/g, weight: 1.8 },
    { pattern: /what.*can.*do|how.*to.*use/g, weight: 2.0 },
    
    // Question patterns for guidance
    { pattern: /Î≠ê.*Ìï†\s*Ïàò\s*Ïûà/g, weight: 1.5 },
    { pattern: /Ïñ¥Îñ§.*Í∏∞Îä•/g, weight: 1.5 },
    { pattern: /ÏÇ¨Ïö©.*Î∞©Î≤ï|Î∞©Î≤ï.*ÏÇ¨Ïö©/g, weight: 1.8 },
    { pattern: /ÏãúÏûë.*Ïñ¥ÎñªÍ≤å|Ïñ¥ÎñªÍ≤å.*ÏãúÏûë/g, weight: 1.8 },
    { pattern: /tutorial|ÌäúÌÜ†Î¶¨Ïñº|ÏïàÎÇ¥/g, weight: 1.8 },
    { pattern: /Ï≤òÏùå.*Ïç®|Ï≤òÏùå.*ÏÇ¨Ïö©/g, weight: 1.8 }
  ]
  
  // System engineering patterns and keywords (Korean + English) - Enhanced with weights
  const systemPatterns = [
    // Server operations (high weight)
    { pattern: /ÏÑúÎ≤Ñ.*Ï†ëÏÜç|Ï†ëÏÜç.*ÏÑúÎ≤Ñ/g, weight: 2.5 },
    { pattern: /ÏÑúÎ≤Ñ.*ÏÉÅÌÉú|ÏÉÅÌÉú.*ÌôïÏù∏/g, weight: 2.0 },
    { pattern: /ÏãúÏä§ÌÖú.*Ï†ïÎ≥¥|ÏãúÏä§ÌÖú.*ÏÇ¨Ïö©Îüâ/g, weight: 2.0 },
    { pattern: /ÏóÖÌÉÄÏûÑ|uptime|Í∞ÄÎèôÏãúÍ∞Ñ/g, weight: 1.8 },
    { pattern: /Î©îÎ™®Î¶¨.*ÏÇ¨Ïö©|cpu.*ÏÇ¨Ïö©|ÎîîÏä§ÌÅ¨.*ÏÇ¨Ïö©/g, weight: 2.0 },
    
    // Connection info patterns (very high weight)
    { pattern: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/g, weight: 3.0 }, // IP addresses
    { pattern: /port.*\d+|Ìè¨Ìä∏.*\d+/g, weight: 2.5 },
    { pattern: /password.*:|ÎπÑÎ∞ÄÎ≤àÌò∏.*:/g, weight: 2.5 },
    { pattern: /user.*:|Ïú†Ï†Ä.*:|ÏÇ¨Ïö©Ïûê.*:/g, weight: 2.0 },
    
    // Infrastructure keywords (medium-high weight)
    { pattern: /docker|kubernetes|k8s|nginx|apache/g, weight: 2.2 },
    { pattern: /aws|gcp|azure|cloud|ÌÅ¥ÎùºÏö∞Îìú/g, weight: 2.0 },
    { pattern: /database|mysql|postgres|redis|mongodb/g, weight: 2.0 },
    { pattern: /linux|ubuntu|centos|debian/g, weight: 1.8 },
    { pattern: /Î∞∞Ìè¨|deploy|Ïù∏ÌîÑÎùº|infrastructure/g, weight: 2.0 },
    
    // System commands and operations
    { pattern: /ssh|Ïó∞Í≤∞|Ï†ëÏÜç|connection/g, weight: 2.2 },
    { pattern: /Î°úÍ∑∏|log|Î™®ÎãàÌÑ∞ÎßÅ|monitoring/g, weight: 1.8 },
    { pattern: /ÎÑ§Ìä∏ÏõåÌÅ¨|network|Î∞©ÌôîÎ≤Ω|firewall/g, weight: 1.8 },
    { pattern: /Î∞±ÏóÖ|backup|Î≥µÍµ¨|restore/g, weight: 1.8 }
  ]
  
  // Technical conversation patterns with weights
  const technicalPatterns = [
    { pattern: /Ïñ¥ÎñªÍ≤å.*ÏÑ§Ïπò|ÏÑ§Ïπò.*Î∞©Î≤ï/g, weight: 1.8 },
    { pattern: /ÏÑ§Ï†ï.*Î∞©Î≤ï|ÏÑ§Ï†ï.*Ïñ¥ÎñªÍ≤å/g, weight: 1.8 },
    { pattern: /Î¨∏Ï†ú.*Ìï¥Í≤∞|Ïò§Î•ò.*Ìï¥Í≤∞/g, weight: 1.8 },
    { pattern: /ÏÑ±Îä•.*Í∞úÏÑ†|ÏµúÏ†ÅÌôî/g, weight: 1.6 },
    { pattern: /config|configuration|Íµ¨ÏÑ±/g, weight: 1.6 },
    { pattern: /troubleshoot|Î¨∏Ï†ú.*ÏßÑÎã®/g, weight: 1.8 }
  ]
  
  let guideScore = 0
  let systemScore = 0
  let technicalScore = 0
  
  // Calculate guide intent score with weighted patterns
  guidePatterns.forEach(({ pattern, weight }) => {
    const matches = (lowerMessage.match(pattern) || []).length
    guideScore += matches * weight
  })
  
  // Calculate system engineering score with weighted patterns
  systemPatterns.forEach(({ pattern, weight }) => {
    const matches = (lowerMessage.match(pattern) || []).length
    systemScore += matches * weight
  })
  
  // Calculate technical conversation score with weighted patterns
  technicalPatterns.forEach(({ pattern, weight }) => {
    const matches = (lowerMessage.match(pattern) || []).length
    technicalScore += matches * weight
  })
  
  // Enhanced context analysis
  if (message.includes('ÏÑúÎ≤Ñ:') || message.includes('host:') || message.includes('IP:')) {
    systemScore += 3.0 // Very strong indicator
  }
  
  // SSH Ïª®ÌÖçÏä§Ìä∏ Í∏∞Î∞ò Í∞ÄÏ§ëÏπò (Îß§Ïö∞ Ï§ëÏöî!)
  if (hasActiveSSHConnection) {
    console.log(`üîó [SSH_CONTEXT] Active SSH connection detected - boosting system engineering intent`)
    
    // SSH Ïó∞Í≤∞Ïù¥ ÌôúÏÑ±ÌôîÎêú ÏÉÅÌÉúÏóêÏÑú ÏãúÏä§ÌÖú Í¥ÄÎ†® ÏßàÎ¨∏ÏùÄ Í∞ïÌïòÍ≤å system_engineeringÏúºÎ°ú Î∂ÑÎ•ò
    const systemKeywords = [
      'Ïö¥ÏòÅÏ≤¥Ï†ú', 'Ìò∏Ïä§Ìä∏ÎÑ§ÏûÑ', 'hostname', 'ÏÑúÎ≤Ñ', 'server', 'ÏãúÏä§ÌÖú', 'system', 
      'Î©îÎ™®Î¶¨', 'memory', 'cpu', 'ÎîîÏä§ÌÅ¨', 'disk', 'ÌîÑÎ°úÏÑ∏Ïä§', 'process',
      'ÎÑ§Ìä∏ÏõåÌÅ¨', 'network', 'Ìè¨Ìä∏', 'port', 'Î°úÍ∑∏', 'log', 'ÏÉÅÌÉú', 'status',
      'ÏóÖÌÉÄÏûÑ', 'uptime', 'Í∞ÄÎèôÏãúÍ∞Ñ', 'os', 'Î¶¨ÎàÖÏä§', 'linux', 'Ïö∞Î∂ÑÌà¨', 'ubuntu'
    ]
    
    const hasSystemKeyword = systemKeywords.some(keyword => 
      lowerMessage.includes(keyword.toLowerCase())
    )
    
    if (hasSystemKeyword) {
      systemScore += 4.0 // SSH Ïª®ÌÖçÏä§Ìä∏ÏóêÏÑú ÏãúÏä§ÌÖú ÌÇ§ÏõåÎìú = Í∞ïÎ†•Ìïú system_engineering Ïã†Ìò∏
      console.log(`üîó [SSH_CONTEXT] System keyword found in SSH context - strong system_engineering signal`)
    } else {
      // SSH Ïª®ÌÖçÏä§Ìä∏ÏóêÏÑú ÏùºÎ∞ò ÏßàÎ¨∏ÎèÑ ÏãúÏä§ÌÖú Í¥ÄÎ†®Ïùº Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏùå
      systemScore += 2.0
      console.log(`üîó [SSH_CONTEXT] Question in SSH context - likely system_engineering`)
    }
  }
  
  // Question mark analysis
  if (message.includes('?') || message.includes('Ôºü')) {
    if (systemScore > 1.0) systemScore += 0.8
    else if (guideScore > 0) guideScore += 1.0
    else guideScore += 0.8 // Default to guide for questions
  }
  
  // Enhanced Korean technical terms
  const koreanTechTerms = ['ÏÑúÎ≤Ñ', 'ÏãúÏä§ÌÖú', 'ÎÑ§Ìä∏ÏõåÌÅ¨', 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§', 'Î∞∞Ìè¨', 'Ïù∏ÌîÑÎùº', 'ÌÅ¥ÎùºÏö∞Îìú', 'Ï†ëÏÜç', 'Ïó∞Í≤∞']
  const koreanTechMatches = koreanTechTerms.filter(term => lowerMessage.includes(term)).length
  if (koreanTechMatches > 0) {
    systemScore += koreanTechMatches * 1.2
  }
  
  // Language-specific boosting
  if (language === 'ko') {
    // Korean users tend to ask more direct questions
    if (guideScore > 0) guideScore *= 1.1
    if (systemScore > 0) systemScore *= 1.1
  }
  
  // Determine intent based on enhanced scoring
  console.log(`üîç [INTENT_SCORING] Guide: ${guideScore.toFixed(2)}, System: ${systemScore.toFixed(2)}, Technical: ${technicalScore.toFixed(2)}, Language: ${language}`)
  
  // Enhanced confidence calculation
  const totalScore = guideScore + systemScore + technicalScore
  
  if (guideScore > systemScore && guideScore > technicalScore && guideScore > 1.0) {
    const confidence = Math.min(0.75 + (guideScore / totalScore * 0.2), 0.92)
    return { intent: 'agentUsageGuide', confidence, language }
  }
  
  if (systemScore > guideScore && systemScore > 0.8) {
    const confidence = Math.min(0.75 + (systemScore / totalScore * 0.25), 0.95)
    return { intent: 'system_engineering', confidence, language }
  }
  
  if (technicalScore > 1.5) {
    const confidence = Math.min(0.65 + (technicalScore / totalScore * 0.2), 0.85)
    return { intent: 'system_engineering', confidence, language }
  }
  
  // More intelligent default classification
  if (totalScore < 0.5) {
    return { intent: 'general', confidence: 0.4, language }
  }
  
  // When uncertain, lean towards guide for questions
  if (message.includes('?') || message.includes('Ôºü')) {
    return { intent: 'agentUsageGuide', confidence: 0.6, language }
  }
  
  return { intent: 'general', confidence: 0.5, language }
}

export async function intentClassifierNode(
  state: ChatState,
  config: { apiKey: string; model?: string; useLocalClassification?: boolean }
): Promise<NodeResponse> {
  console.log('=== Intent Classifier Node ===')
  console.log('Analyzing user message:', state.lastUserMessage)

  // Use local classification if API key is dummy or useLocalClassification is true
  const shouldUseLocal = config.apiKey === 'dummy' || config.useLocalClassification
  
  if (shouldUseLocal) {
    console.log('Using local keyword-based classification')
    const result = classifyIntentLocally(state.lastUserMessage, state.sshConnection)
    console.log('Local intent classification result:', result)
    
    return {
      intent: result.intent as 'general' | 'system_engineering' | 'agentUsageGuide',
      confidence: result.confidence,
      detectedLanguage: result.language,
    }
  }

  // Use OpenAI-based classification
  console.log('Using OpenAI-based classification')
  const llm = new ChatOpenAI({
    openAIApiKey: config.apiKey,
    modelName: config.model || 'gpt-3.5-turbo',
    temperature: 0.1, // Low temperature for consistent classification
  })

  try {
    // SSH Ïª®ÌÖçÏä§Ìä∏ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    const sshContext = state.sshConnection && state.sshConnection.isActive 
      ? `\n\nIMPORTANT: Active SSH connection context detected to server ${state.sshConnection.host}. Questions about system information, hostname, OS, memory, CPU, etc. should be classified as 'system_engineering' even if they seem general.`
      : ''
    
    const prompt = INTENT_CLASSIFICATION_PROMPT.replace(
      '{userMessage}',
      state.lastUserMessage
    ) + sshContext

    const response = await llm.invoke([
      new SystemMessage('You are an intent classifier.'),
      new HumanMessage(prompt),
    ])

    // Parse the JSON response
    const content = response.content.toString()
    const jsonMatch = content.match(/\{[\s\S]*\}/)
    
    if (!jsonMatch) {
      throw new Error('Failed to parse intent classification response')
    }

    const result: IntentClassificationResult = JSON.parse(jsonMatch[0])
    
    console.log('Intent classification result:', result)

    // Detect language for OpenAI result as well
    const isKorean = /[Í∞Ä-Ìû£]/.test(state.lastUserMessage)
    const detectedLanguage = isKorean ? 'ko' : 'en'

    return {
      intent: result.intent as 'general' | 'system_engineering' | 'agentUsageGuide',
      confidence: result.confidence,
      detectedLanguage: detectedLanguage as 'ko' | 'en',
    }
  } catch (error) {
    console.error('Intent classification error:', error)
    // Fallback to local classification with SSH context
    console.log('Falling back to local classification due to error')
    const result = classifyIntentLocally(state.lastUserMessage, state.sshConnection)
    console.log('Fallback local classification result:', result)
    
    return {
      intent: result.intent as 'general' | 'system_engineering' | 'agentUsageGuide',
      confidence: result.confidence,
      detectedLanguage: result.language,
    }
  }
}